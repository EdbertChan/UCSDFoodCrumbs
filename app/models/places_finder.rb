class PlacesFinder < ActiveRecord::Base
  #@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
  #Name:	getPlaces
  #Description: This function will take in some routeboxes and return a list
  # of places that are found within in the routeBoxes
  #Params:	maxRouteBoxer, userRouteBoxer - an array of array of coordinates
  # as created by the user and google's maximum bounds.
  # params - a map of all the parameters passed in by the user
  # routeLength - a length of the entire trip
  #Return:	placesList - a JsonArray of all the places
  #@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
  def self.getPlaces(maxRouteBoxer, userRouteBoxer, params, routeLength)
    #initialization
    searchString = ""
    if (defined? params[:places_filter])
      searchString = params[:places_filter]
    end

    radius = 5000
    if (params.has_key? (:radius))
      radius = params[:radius].to_f/1.6
      radius *= 1000
    end

    placesResults = placesQueryAl(userRouteBoxer, searchString, radius)
    placesList = filterResults(userRouteBoxer, placesResults)
    return placesList
  end

  #@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
  #Name:	placesQuery
  #Description: This function will gather all the restaurants within the
  # maximum specified route boxes.
  #Params:	maxRouteBoxer, userRouteBoxer - an array of array of coordinates
  # as created by the user and google's maximum bounds.
  # params - a map of all the parameters passed in by the user
  # routeLength - a length of the entire trip
  # radius - how far the user wants to deviate away from the route
  #Return:	Json.generate(placesList) - a Json representation of the places
  #@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
  def self.placesQuery(maxRouteBoxer, userBoxer, searchString, radius, routeLength)
    placesList = Array.new
    for i in 0..maxRouteBoxer.length-1
      #latitude for search
      midLat = (maxRouteBoxer[i][0][0]+maxRouteBoxer[i][1][0])/2.0
      #longitude for search
      midLong = (maxRouteBoxer[i][0][1]+maxRouteBoxer[i][1][1])/2.0

      #determine whether we should use which box?

      placesListTemp = JSON.parse(Places.findPlaces(midLat, midLong, radius, searchString))


      if (placesList.any?)
        placesList = placesListTemp
        placesList.delete("html_attributions")
        placesList.delete("next_page_token")
      else
        placesList["results"].concat (placesListTemp)["results"]
      end
    end

    placesList["results"] = placesList["results"].uniq # remove duplicates

    return JSON.generate(placesList)
  end

  #@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
  #Name:	placesQuery
  #Description: This function will filter out any restaurants that are
  # not within the user specified boxes.
  #Params: userRouteBoxer - an array of array of coordinates
  # as created by the user and google's maximum bounds.
  # placesList - list of places as generated by the user
  #Return:	Json.generate(placesList) - a Json representation of the resulting
  # places
  #@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
  def self.filterResults(userRouteBoxer, placesList)
    # filter for all restaurants if they're inside the user defined routeboxer
    #bottomleft upperright

    i = 0
    #loop through the list of places
    while i < placesList["results"].length
      #we assume it is not in bounds
      inBounds = true

      #itterate through the user defined boxes
      for j in 0..(userRouteBoxer.length-1)

        placesList_lat= placesList["results"][i]["geometry"]["location"]["lat"]
        placesList_long=placesList["results"][i]["geometry"]["location"]["lng"]
        #get the lat and long of the current place

        #if it is out of bounds
        if (placesList_lat < userRouteBoxer[j][1][0] &&
            placesList_lat > userRouteBoxer[j][0][0] &&
            placesList_long < userRouteBoxer[j][1][1] &&
            placesList_long > userRouteBoxer[j][0][1])
          inBounds = false
          break
        end
      end
      #if it is not in bounds
      if inBounds == false

        placesList["results"].slice!(i)
      end
      i = i + 1
    end


    return JSON.generate(placesList)
  end
end
